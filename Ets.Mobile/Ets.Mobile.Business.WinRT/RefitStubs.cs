﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Ets.Mobile.Business.Entities.Results.Signets;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace Ets.Mobile.Business.Contracts
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedISignetsBusinessService : ISignetsBusinessService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedISignetsBusinessService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<LoginResult> LoginRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<LoginResult>) methodImpls["LoginRaw"](Client, arguments);
        }

        public virtual Task<UserDetailsResult> UserDetailsRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<UserDetailsResult>) methodImpls["UserDetailsRaw"](Client, arguments);
        }

        public virtual Task<CoursesResult> CoursesRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<CoursesResult>) methodImpls["CoursesRaw"](Client, arguments);
        }

        public virtual Task<CoursesIntervalSemesterResult> CoursesIntervalSemesterRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<CoursesIntervalSemesterResult>) methodImpls["CoursesIntervalSemesterRaw"](Client, arguments);
        }

        public virtual Task<SemestersResult> SemestersRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<SemestersResult>) methodImpls["SemestersRaw"](Client, arguments);
        }

        public virtual Task<ProgramsResult> ProgramsRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<ProgramsResult>) methodImpls["ProgramsRaw"](Client, arguments);
        }

        public virtual Task<TeammatesResult> TeammatesRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<TeammatesResult>) methodImpls["TeammatesRaw"](Client, arguments);
        }

        public virtual Task<EvaluationsResult> EvaluationsRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<EvaluationsResult>) methodImpls["EvaluationsRaw"](Client, arguments);
        }

        public virtual Task<ScheduleAndTeachersResult> ScheduleAndTeachersRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<ScheduleAndTeachersResult>) methodImpls["ScheduleAndTeachersRaw"](Client, arguments);
        }

        public virtual Task<ScheduleFinalExamsResult> ScheduleFinalExamsRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<ScheduleFinalExamsResult>) methodImpls["ScheduleFinalExamsRaw"](Client, arguments);
        }

        public virtual Task<CourseForSemesterResult> CoursesForSemesterRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<CourseForSemesterResult>) methodImpls["CoursesForSemesterRaw"](Client, arguments);
        }

        public virtual Task<ReplacedDaysResult> ReplacedDaysRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<ReplacedDaysResult>) methodImpls["ReplacedDaysRaw"](Client, arguments);
        }

        public virtual Task<ScheduleResult> ScheduleRaw(Dictionary<string, string> form)
        {
            var arguments = new object[] { form };
            return (Task<ScheduleResult>) methodImpls["ScheduleRaw"](Client, arguments);
        }

    }
}


